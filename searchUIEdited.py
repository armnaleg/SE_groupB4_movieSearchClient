# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'search.ui'
#
# Created by: PyQt4 UI code generator 4.11.4


# Date object imported for later use to read the current year on the user's device
from datetime import date

# Objects and modules imported from PyQt4 for use in coding the GUI
from PyQt4 import QtCore, QtGui
from PyQt4.QtCore import pyqtSignal
from PyQt4.QtGui import *
from movieSearch import movieSearch, movieData2HTML

# Auto-generated code testing for the existence of the fromUtf8 attribute in QString object,
# if it doesn't exist it is defined in the 'except' block
try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

# Existence of UnicodeUTF8 attribute in QApplication object checked,
# if it exists the _translate function is defined with the '_encoding' parameter set as UnicodeUTF8,
# if it does not then _translate is defined without this parameter.
try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

# This class comes from eyllanesc's answer to StackOverflow question
# 'https://stackoverflow.com/questions/46671067/pyqt-clear-qlineedit-on-click-event'
class ClickableLineEdit(QLineEdit):
    clicked = pyqtSignal()
    def mousePressEvent(self, event):
        self.clicked.emit()
        QLineEdit.mousePressEvent(self, event)

# Largely auto-generated class defining the main / home window of the GUI
class Ui_MainWindow(object):
    # When this method is called, the objects within the main window are defined,
    # its code is largely auto-generated by 'Qt Designer' and 'pyuic'.
    # See the PyQt documentation online for details of layouts, widgets, and other GUI objects
    # provided by the PyQt GUI API.
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(782, 406)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.mainVLayout = QtGui.QVBoxLayout()
        self.mainVLayout.setObjectName(_fromUtf8("mainVLayout"))
        self.searchBarHLayout = QtGui.QHBoxLayout()
        self.searchBarHLayout.setObjectName(_fromUtf8("searchBarHLayout"))
        # The search bar ('lineEdit') is defined as our custom clickable line edit
        self.lineEdit = ClickableLineEdit(self.centralwidget)
        self.lineEdit.setObjectName(_fromUtf8("lineEdit"))
        self.searchBarHLayout.addWidget(self.lineEdit)
        self.searchButton = QtGui.QPushButton(self.centralwidget)
        self.searchButton.setMinimumSize(QtCore.QSize(93, 28))
        self.searchButton.setObjectName(_fromUtf8("searchButton"))
        self.searchBarHLayout.addWidget(self.searchButton)
        self.mainVLayout.addLayout(self.searchBarHLayout)
        self.searchOptionsHLayout = QtGui.QHBoxLayout()
        self.searchOptionsHLayout.setObjectName(_fromUtf8("searchOptionsHLayout"))
        self.yearVLayout = QtGui.QVBoxLayout()
        self.yearVLayout.setObjectName(_fromUtf8("yearVLayout"))
        self.yearLabel = QtGui.QLabel(self.centralwidget)
        self.yearLabel.setObjectName(_fromUtf8("yearLabel"))
        self.yearVLayout.addWidget(self.yearLabel)

        self.yearToggle = QtGui.QCheckBox(self.centralwidget)

        self.yearVLayout.addWidget(self.yearToggle)

        self.yearChoiceBox = QtGui.QComboBox(self.centralwidget)
        self.yearChoiceBox.setObjectName(_fromUtf8("yearChoiceBox"))
        self.yearVLayout.addWidget(self.yearChoiceBox)
        self.searchOptionsHLayout.addLayout(self.yearVLayout)
        self.dateHLayout = QtGui.QHBoxLayout()
        self.dateHLayout.setObjectName(_fromUtf8("dateHLayout"))
        self.dateVLayout = QtGui.QVBoxLayout()
        self.dateVLayout.setObjectName(_fromUtf8("dateVLayout"))
        self.dateLabelEnableHLayout = QtGui.QHBoxLayout()
        self.dateLabelEnableHLayout.setObjectName(_fromUtf8("dateLabelEnableHLayout"))
        self.apiVLayout = QtGui.QVBoxLayout()
        self.apiVLayout.setObjectName(_fromUtf8("apiVLayout"))
        self.apiLabel = QtGui.QLabel(self.centralwidget)
        self.apiLabel.setObjectName(_fromUtf8("apiLabel"))
        self.apiVLayout.addWidget(self.apiLabel)
        self.apiChoiceBox = QtGui.QComboBox(self.centralwidget)
        self.apiChoiceBox.setObjectName(_fromUtf8("apiChoiceBox"))
        self.apiChoiceBox.addItem(_fromUtf8(""))
        self.apiChoiceBox.addItem(_fromUtf8(""))
        self.apiVLayout.addWidget(self.apiChoiceBox)
        self.dateHLayout.addLayout(self.apiVLayout)
        self.searchOptionsHLayout.addLayout(self.dateHLayout)
        self.mainVLayout.addLayout(self.searchOptionsHLayout)
        self.verticalLayout.addLayout(self.mainVLayout)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 782, 26))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)
        self.actionQuit = QtGui.QAction(MainWindow)
        self.actionQuit.setObjectName(_fromUtf8("actionQuit"))
        self.menuFile.addAction(self.actionQuit)
        self.menubar.addAction(self.menuFile.menuAction())

        # The retranslateUi method called here is auto-generated,
        # and provides support for localisation of the application
        # for foreign languages.
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # The rest of the code in this method is written by Laurence,

        # The current year is obtained via the 'date' object from the 'datetime' module
        curYear = date.today().year
        # This list comprehension defines 'yearOptions' as a list of years,
        # decrementing from four years into the future, so as to cover upcoming releases,
        # down to 1850 (roughly when the first moving pictures were being produced).
        yearOptions = [year for year in range(curYear+4, 1849, -1)]

        # This for loop adds each year in sequence to the 'yearChoiceBox' combo box.
        yearCount = 0
        for year in yearOptions:
             self.yearChoiceBox.addItem(_fromUtf8(""))
             self.yearChoiceBox.setItemText(yearCount, _translate("MainWindow", str(year), None))
             yearCount += 1   

        # An empty array is created to hold any search result windows,
        # which will appear when the user submits their search.
        self.resultWindows = []

        # As the default API 'TMDb' doesn't support searching movies by year, the year combo box is set to disabled by
        # default.
        self.yearLabel.setEnabled(False)
        self.yearChoiceBox.setEnabled(False)
        self.yearToggle.setEnabled(False)

        self.yearToggle.stateChanged.connect(self.yearToggleChanged)

        # When the choice of API is changed in the API combo box, the class's 'APIChanged' method is called,
        # with the API combo box passed to it as a parameter
        self.apiChoiceBox.currentIndexChanged.connect(lambda: self.APIChanged(self.apiChoiceBox))

        # When the search bar is clicked or its text is changed, call the class's 'searchBarClicked' method.
        # The 'searchBarClicked' method clears the search bar text if it contains the default text.
        self.lineEdit.clicked.connect(self.searchBarClicked)
        self.lineEdit.textChanged.connect(self.searchBarClicked)

        # When the search button is clicked, the 'showResults' method is called,
        # this creates and displays a new result window.
        self.searchButton.clicked.connect(self.showResults)

        # When the main window's menu bar's 'Quit' option is clicked, or its shortcut ('Ctrl + Q') is pressed,
        # or the 'X' in the corner of the main window is clicked, the entire application is closed.
        self.actionQuit.triggered.connect(QtCore.QCoreApplication.instance().quit)
        MainWindow.closeEvent = self.closeEvent

    # Auto-generated method which automatically translates the GUI text if necessary, for different localisations,
    # and defines the text for various objects within the GUI.
    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate("MainWindow", "Movie Information - Search", None))
        self.lineEdit.setText(_translate("MainWindow", "Search for movie by title", None))
        self.searchButton.setText(_translate("MainWindow", "Go", None))
        self.yearLabel.setText(_translate("MainWindow", "Year", None))


        self.apiLabel.setText(_translate("MainWindow", "API", None))
        self.apiChoiceBox.setItemText(0, _translate("MainWindow", "TMDb", None))
        self.apiChoiceBox.setItemText(1, _translate("MainWindow", "OMDB", None))
        self.menuFile.setTitle(_translate("MainWindow", "File", None))
        self.actionQuit.setText(_translate("MainWindow", "Quit", None))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q", None))


    def yearToggleChanged(self):
        yearToggleChecked = self.yearToggle.isChecked()
        print yearToggleChecked
        self.yearLabel.setEnabled(yearToggleChecked)
        self.yearChoiceBox.setEnabled(yearToggleChecked)


    # This method, called when the choice of API is changed, checks the choice of API, and enables or disables the year
    # combo box depending on whether or not the API supports searching for movies by year.
    def APIChanged(self, apiChoiceBox):
        if str(apiChoiceBox.currentText()) == 'TMDb':
            self.yearLabel.setEnabled(False)
            self.yearChoiceBox.setEnabled(False)
            self.yearToggle.setEnabled(False)
            self.yearToggle.setCheckState(False)
        else:
            self.yearLabel.setEnabled(True)
            self.yearChoiceBox.setEnabled(False)
            self.yearToggle.setEnabled(True)


    # This method, called when the search bar is clicked or has its text changed, clears the search bar's text if it
    # contains the default text: 'Search for movie by title'
    def searchBarClicked(self):
        if 'Search for movie by title' in self.lineEdit.text():
            self.lineEdit.clear()

    # This method, called when a search is submitted by the user, creates a new result window,
    # appended to the 'resultWindows' list so that multiple search result windows can be created for multiple searches.
    def showResults(self):
        # Empty dictionary created to be populated with parameters to be passed to the function 'movieSearch' upon
        # instantiation of a search result window.
        searchParamDict = {}
        # The text of the search text box is added to the dictionary
        searchParamDict['text'] = str(self.lineEdit.text())
        # The user's choice of API from the API combo box is added to the dictionary
        searchParamDict['API'] = str(self.apiChoiceBox.currentText())

        # If the user has chosen OMDB as the API, then the year parameter can be, and is used as a search parameter
        if searchParamDict['API'] == 'OMDB':
            if self.yearChoiceBox.isEnabled():
                searchParamDict['year'] = str(self.yearChoiceBox.currentText())

        # A new 'resultWindow' is added to the array, allowing multiple result windows to be displayed at the same time.
        # The parameters for 'movieSearch' are passed to the object in a dictionary as a parameter of its 'init'
        # constructor method.
        self.resultWindows.append(Ui_ResultsWindow(searchParamDict))

    # This method, called when the main window is closed by the user clicking 'X' or using 'Alt-F4',
    # closes the entire application, as opposed to the default behaviour of just closing the individual window.
    def closeEvent(self, event):
        sys.exit(app.exec_())


# This class represents a window displaying the results of a search to the user. It inherits from PyQt4's QtGui's
# QMainWindow class. This 'Ui_ResultsWindow' class was coded by Laurence, and not auto-generated.
class Ui_ResultsWindow(QtGui.QMainWindow):
    # This method is the class's constructor, executed on the instantiation of the object.
    #
    def __init__(self, searchParamDict):
        # The 'super' function gets the superclass (parent class) of the current class.
        # This line ensures that the constructor for the inherited 'QMainWindow' class is called.
        super(Ui_ResultsWindow, self).__init__()
        # The default dimensions and position of the window are defined.
        self.setGeometry(50, 50, 500, 300)

        # The window's title is defined as 'Result for...' followed by the text the user input for 'movieSearch'.
        self.setWindowTitle("Results for " + searchParamDict['text'])

        # A widget is created, and fit with a layout to contain the text box in which movie data is to be displayed to
        # the user. The widget and layout are used to ensure that the text box fills the window and is resizable.
        resultsWidget = QtGui.QWidget(self)
        self.setCentralWidget(resultsWidget)
        gridLayout = QVBoxLayout()
        resultsWidget.setLayout(gridLayout)
        resultsTextBox = QTextEdit()

        # HTML representation of the API response is assigned to be rendered in the result window's text box.
        # If there is any error in accessing result data from the dictionary, or no data is returned by the API,
        # 'No results' is displayed to user in bold instead of any movie data that would normally be displayed.
        # try:
        if searchParamDict['API'] == 'TMDb':
            resultsHTML = movieData2HTML(movieSearch(searchParamDict['text'], None, 'TMDb'))
        else:
            if not('year' in searchParamDict):
                resultsHTML = movieData2HTML(movieSearch(searchParamDict['text'], None, 'OMDB'))
            else:
                resultsHTML = movieData2HTML(movieSearch(searchParamDict['text'], searchParamDict['year'], 'OMDB'))
        # except:
        #     resultsHTML = "<b>No results</b>"

        resultsTextBox.setHtml(resultsHTML)

        if resultsTextBox.toPlainText() == "":
            resultsHTML = "<b>No results</b>"
            resultsTextBox.setHtml(resultsHTML)

        # The text box is set to read only so that its contents cannot be modified by the user.
        resultsTextBox.setReadOnly(True)
        # A scroll bar is defined and added to the text box
        resultsScroll = QtGui.QScrollArea()
        resultsScroll.setWidget(resultsTextBox)
        resultsScroll.setWidgetResizable(True)
        gridLayout.addWidget(resultsScroll)

        # The text box is displayed to the user
        self.show()

# This code in the scope of this 'if statement' runs if the code is executed directly, as opposed to being imported
# in another Python script. This is where the execution of the program code begins.
if __name__ == "__main__":
    # The 'sys' module is imported to allow the program's execution to be halted once the user has
    # closed the application.
    import sys
    # The application object is defined. 'sys.argv' represents a list of parameters provided by the user
    # when executing the program from the terminal / command prompt. Our program doesn't make use of any, but it is
    # convention in PyQt programming to accept them.
    app = QtGui.QApplication(sys.argv)
    # A generic window object is instantiated to be used as a parameter of the'setupUi' method of
    # the 'Ui_Mainwindow' class.

    icon = QtGui.QIcon()
    icon.addFile('images/SELogoSmall.png', QtCore.QSize(256, 256))
    app.setWindowIcon(icon)

    MainWindow = QtGui.QMainWindow()
    # The main / home window of the application is instatiated as 'ui', and its setup method is called
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    # The main window is displayed to the user.
    MainWindow.show()
    # When the execution of the application has been ended by the user, the scripts execution stops.
    sys.exit(app.exec_())